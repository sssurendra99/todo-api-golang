// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/todos": {
            "get": {
                "description": "Retrieve all todo items from the database",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Todos"
                ],
                "summary": "Get all todos",
                "responses": {
                    "200": {
                        "description": "List of Todo items",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/entities.Todo"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/shared.ResponseError"
                        }
                    }
                }
            },
            "post": {
                "description": "Add a new todo to the database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Todo"
                ],
                "summary": "Create a new Todo",
                "parameters": [
                    {
                        "description": "Todo Model",
                        "name": "todo",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entities.Todo"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/entities.Todo"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/shared.ResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/shared.ResponseError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "entities.Todo": {
            "description": "A task or to-do item with completion status",
            "type": "object",
            "properties": {
                "createdAt": {
                    "description": "@description The timestamp when the record was created",
                    "type": "string"
                },
                "deletedAt": {
                    "description": "@description The timestamp when the record was deleted (for soft deletes)",
                    "type": "string"
                },
                "id": {
                    "description": "@description Unique identifier for the Todo\n@example \"3fcdfe19-0dc6-4b9a-9354-c8b7e0b8a7e5\"",
                    "type": "string"
                },
                "isCompleted": {
                    "description": "@description Whether the Todo is completed\n@example false",
                    "type": "boolean"
                },
                "name": {
                    "description": "@description Name or title of the Todo\n@example \"Buy groceries\"",
                    "type": "string"
                },
                "updatedAt": {
                    "description": "@description The timestamp when the record was last updated",
                    "type": "string"
                }
            }
        },
        "shared.ResponseError": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
